syntax = "proto3";

package greet;

// The Greeter service provides various types of gRPC calls to demonstrate
// Unary, Server Streaming, Client Streaming, and Bidirectional Streaming RPCs.
service Greeter {
  // Unary RPC: The client sends a single request and receives a single response.
  // Example use case: Fetching a personalized greeting for a user.
  rpc SayHello (HelloRequest) returns (HelloReply);

  // Server Streaming RPC: The client sends a single request, and the server
  // responds with a stream of messages.
  // Example use case: Sending a series of greetings back to the client.
  rpc ParrotSaysHello (HelloRequest) returns (stream HelloReply);
  
  // Client Streaming RPC: The client sends a stream of requests, and the server
  // responds with a single summary message.
  // Example use case: Collecting multiple greetings from the client and
  // returning a combined response.
  rpc ChattyClientSaysHello (stream HelloRequest) returns (DelayedReply);

  // Bidirectional Streaming RPC: Both the client and server send and receive
  // streams of messages simultaneously.
  // Example use case: Real-time interaction where both sides exchange greetings.
  rpc InteractingHello (stream HelloRequest) returns (stream HelloReply);
}

// The request message containing the user's name and an optional greeting.
message HelloRequest {
  // The name of the user to greet.
  string name = 1;

  // An optional custom greeting message.
  string greeting = 2;
}

// The response message containing the server's greeting.
message HelloReply {
  // The greeting message sent by the server.
  string message = 1;
}

// The response message for client streaming, containing a summary message
// and the list of requests received from the client.
message DelayedReply {
  // A summary message generated by the server.
  string message = 1;

  // The list of requests received from the client.
  repeated HelloRequest request = 2;
}